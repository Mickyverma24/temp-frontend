Head to [**Company Dataset API**](https://www.notion.so/Company-Dataset-API-a6c3072d9dd2423bb5dda4a37e2666a6?pvs=21) 

##
## Dataset API Endpoints

### 1. Job Listings

Crustdata’s company_id is the unique identifier of a company in our database. It is unique and it never changes. It is numeric.

Use this request to get job listings that were last updated by the company on 1st Feb, 2024 for all companies with  `company_id` equal to any one of [680992, 673947, 631280, 636304, 631811]
**Note**:

1. To retrieve all the jobs listings, keep iterating over `offset` field in the payload. 
2. **Do not** increase `limit` beyond 100 as the result will be truncated without any ordering.
3. Real-time Fetch (`sync_from_source`): 
    1. Allows fetching up to 100 jobs in real-time (*use `background_task` if all the jobs needs to be fetched)* 
    2. Works for **1 company** per request
4. Background Task (`background_task`):
    1. Updates job listings for up to **10 companies** at a time in the background
    2. Returns a task ID in the response. Use this task ID to check the status or results via the endpoint `task/result/<task_id>`
5. You need to provide `$auth_token` : Your Crustdata API Key/Auth Token. Reach out to support@crustdata.com through your company email if not available
Request Body Overview 
The request body is a JSON object that contains the following parameters:
Parameters:
Parameter
Required
Description
filters
Yes
An object containing the filter conditions.
offset
Yes
The starting point of the result set. Default value is 0.
limit
Yes
The number of results to return in a single request. 
Maximum value is 100. 
Default value is 100.
sorts
No
An array of sorting criteria.
aggregations
No
[Optional] List of column objects you want to aggregate on with aggregate type
functions
No
[Optional] List of functions you want to apply
groups
No
[Optional] List of group by you want to apply
background_task
No
[Optional] A boolean flag. If true, triggers a background task to update jobs for up to 10 companies at a time. Returns a task ID that can be used to fetch results later.
sync_from_source
No 
[Optional] A boolean flag. If true, fetches up to 100 jobs in real-time. Requires a filter on company_id and only allows one company_id in the filter.
filters
Example: 
{
    "op": "and",
    "conditions": [
		    {
				    "op": "or",
				    "conditions": [
							   {"largest_headcount_country", "type": "(.)", "value": "USA"},
							   {"largest_headcount_country", "type": "(.)", "value": "IND"}
						],
				}
        {"column": "title", "type": "in", "value": [ "Sales Development Representative", "SDR", "Business Development Representative", "BDR", "Business Development Manager", "Account Development Representative", "ADR", "Account Development Manager", "Outbound Sales Representative", "Lead Generation Specialist", "Market Development Representative", "MDR", "Inside Sales Representative", "ISR", "Territory Development Representative", "Pipeline Development Representative", "New Business Development Representative", "Customer Acquisition Specialist" ]},
        {"column": "description", "type": "(.)", "value": "Sales Development Representative"}
    ]
}
​
The filters object contains the following parameters:
Parameter
Description
Required
op
The operator to apply on the conditions. The value can be "and" or "or".
Yes
conditions
An array of complex filter objects or basic filter objects (see below)
Yes
conditions parameter
This has two possible types of values
Basic Filter Object
Example: {"column": "crunchbase_total_investment_usd", "type": "=>", "value": "50" } 
The object contains the following parameters:
Parameter
Description
Required
column
The name of the column to filter.
Yes
type
The filter type. The value can be "=>", "=<", "=", "!=", “in”, “(.)”, “[.]”
Yes
value
The filter value.
Yes
allow_null
Whether to allow null values. The value can be "true" or "false". Default value is "false".
No
- List of all `column` values
    - linkedin_id
    - company_website
    - fiscal_year_end
    - company_name
    - markets
    - company_website_domain
    - largest_headcount_country
    - crunchbase_total_investment_usd
    - acquisition_status
    - crunchbase_valuation_usd
    - crunchbase_valuation_lower_bound_usd
    - crunchbase_valuation_date
    - crunchbase_profile_url
    - title
    - category
    - url
    - domain
    - number_of_openings
    - description
    - date_added
    - date_updated
    - city
    - location_text
    - workplace_type
    - reposted_job
    - dataset_row_id
    - pin_area_name
    - pincode
    - district
    - district_geocode
    - wikidata_id
    - state
    - state_geocode
    - country
    - country_code
    - company_id
List of all type values
condition type
condition description
applicable column types
example
"=>"
Greater than or equal
number
{ "column": "crunchbase_total_investment_usd", "type": "=>", "value": "500000"}
"=<"
Lesser than or equal
number
{ "column": "crunchbase_total_investment_usd", "type": "=<", "value": "50"}
"=",
Equal
number
{ "column": "crunchbase_total_investment_usd", "type": "=", "value": "50"}
“<”
Lesser than
number
{ "column": "crunchbase_total_investment_usd", "type": "<", "value": "50"}
“>”
Greater than
number
{ "column": "crunchbase_total_investment_usd", "type": ">", "value": "50"}
“(.)”
Contains, case insensitive
string
{ "column": "title", "type": "(.)", "value": "artificial intelligence"}
“[.]”
Contains, case sensitive
string
{ "column": "title", "type": "[.]", "value": "Artificial Intelligence"}
"!="
Not equals
number
“in”
Exactly matches atleast one of the elements of list
string, number
{ "column": "company_id", "type": "in", "value": [123, 346. 564]}
 Complex Filter Object
Example: 
{
	 "op": "or",
	 "conditions": [
			 {"largest_headcount_country", "type": "(.)", "value": "USA"},
			 {"largest_headcount_country", "type": "(.)", "value": "IND"}
	 ]
}
Same schema as the parent @filters parameter 
## curl
 curl --request POST \
  --url https://api.crustdata.com/data_lab/job_listings/Table/ \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $token' \
  --header 'Content-Type: application/json' \
  --header 'Origin: https://crustdata.com' \
  --header 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36' \
  --data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
        {"column": "company_id", "type": "in", "value": [7576, 680992, 673947, 631280, 636304, 631811]},
        {"column": "date_updated", "type": ">", "value": "2024-02-01"}
      ]
    },
    "groups": [],
    "aggregations": [],
    "functions": [],
    "offset": 0,
    "limit": 100,
    "sorts": []
  }'
  Python
import requests
import json

url = "https://api.crustdata.com/data_lab/job_listings/Table/"

headers = {
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Authorization": "Token $token",
    "Content-Type": "application/json",
    "Origin": "https://crustdata.com",
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
}

data = {
    "tickers": [],
    "dataset": {
        "name": "job_listings",
        "id": "joblisting"
    },
    "filters": {
        "op": "and",
        "conditions": [
                    {"column": "company_id", "type": "in", "value": [7576, 680992, 673947, 631280, 636304, 631811]},
				            {"column": "date_updated", "type": ">", "value": "2024-02-01"}
        ]
    },
    "groups": [],
    "aggregations": [],
    "functions": [],
    "offset": 0,
    "limit": 100,
    "sorts": []
}

response = requests.post(url, headers=headers, data=json.dumps(data))

print(response.json())
Example requests
Get all job listings that 
from a list of company domains AND
posted after a specific data AND
have specific keywords in title
curl --location 'https://api.crustdata.com/data_lab/job_listings/Table/' \
--header 'Accept: application/json, text/plain, */*' \
--header 'Authorization: Token $token' \
--header 'Content-Type: application/json' \
--data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
        {"column": "company_website_domain", "type": "(.)", "value": "ziphq.com"},
        {"column": "date_updated", "type": ">", "value": "2024-08-01"},
		    {
				    "op": "or",
				    "conditions": [
							   {"column": "title", "type": "(.)", "value": "Sales Development Representative"},
							   {"column": "title", "type": "(.)", "value": "SDR"},
							   {"column": "title", "type": "(.)", "value": "Business Development Representative"}
						],
				}       
      ]
    },
    "offset": 0,
    "limit": 100,
    "sorts": [],
  }'
  Get real time job listings from the source for company Rippling
curl --location 'https://api.crustdata.com/data_lab/job_listings/Table/' \
--header 'Accept: application/json, text/plain, */*' \
--header 'Authorization: Token $token' \
--header 'Content-Type: application/json' \
--data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
	        {"column": "company_id", "type": "in", "value": [634043]},      ]
    },
    "offset": 0,
    "limit": 100,
    "sorts": [],
    "sync_from_source": true
  }'
  Fetch job listings for list of company ids from the source in the background
  Request:
curl --location 'https://api.crustdata.com/data_lab/job_listings/Table/' \
--header 'Accept: application/json, text/plain, */*' \
--header 'Authorization: Token $token' \
--header 'Content-Type: application/json' \
--data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
	        {"column": "company_id", "type": "in", "value": [631394, 7576, 680992, 673947, 631280, 636304, 631811]},
      ]
    },
    "offset": 0,
    "limit": 10000,
    "sorts": [],
    "backgrond_task": true
  }'
  Response would be 
{
    "task_id": "3d729bd0-a113-4b31-b09f-65eff79f06fe",
    "task_type": "job_listings",
    "status": "not_started",
    "completed_task_result_endpoint": "/task/result/3d729bd0-a113-4b31-b09f-65eff79f06fe/",
    "created_at": "2024-12-25T02:32:42.811843Z",
    "started_at": null
}
3. Get all job listings that are
    - from a list of Crustdata company_ids AND
    - posted after a specific data AND
    - exactly has one of the given titles

curl --location 'https://api.crustdata.com/data_lab/job_listings/Table/' \
--header 'Accept: application/json, text/plain, */*' \
--header 'Authorization: Token $token' \
--header 'Content-Type: application/json' \
--data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
	        {"column": "company_id", "type": "in", "value": [631394, 7576, 680992, 673947, 631280, 636304, 631811]},
        {"column": "date_updated", "type": ">", "value": "2024-08-01"},
        {
        "column": "title",
        "type": "in",
        "value": [
          "Sales Development Representative",
          "SDR",
          "Business Development Representative",
          "BDR",
          "Business Development Manager",
          "Account Development Representative",
          "ADR",
          "Account Development Manager",
          "Outbound Sales Representative",
          "Lead Generation Specialist",
          "Market Development Representative",
          "MDR",
          "Inside Sales Representative",
          "ISR",
          "Territory Development Representative",
          "Pipeline Development Representative",
          "New Business Development Representative",
          "Customer Acquisition Specialist"
        ]
      }
      ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
  }'

Get count of job listing meeting a criteria
You can set "count": 1 . The last value of the first (and the only) row would be the total count of jobs meeting the criteria
curl --location 'https://api.crustdata.com/data_lab/job_listings/Table/' \
--header 'Accept: application/json, text/plain, */*' \
--header 'Accept-Language: en-US,en;q=0.9' \
--header 'Authorization: Token $token' \
--header 'Content-Type: application/json' \
--header 'Origin: https://crustdata.com' \
--data '{
    "tickers": [],
    "dataset": {
      "name": "job_listings",
      "id": "joblisting"
    },
    "filters": {
      "op": "and",
      "conditions": [
        {"column": "company_id", "type": "in", "value": [631394]},
        {
            "column": "title",
            "type": "in",
            "value": [
            "Sales Development Representative",
            "SDR",
            "Business Development Representative",
            "BDR",
            "Business Development Manager",
            "Account Development Representative",
            "ADR",
            "Account Development Manager",
            "Outbound Sales Representative",
            "Lead Generation Specialist",
            "Market Development Representative",
            "MDR",
            "Inside Sales Representative",
            "ISR",
            "Territory Development Representative",
            "Pipeline Development Representative",
            "New Business Development Representative",
            "Customer Acquisition Specialist"
            ]
        }
      ]
    },
    "offset": 0,
    "count": 1,
    "sorts": []
  }'

- Response would be
    
    ```bash
    {
        "fields": [
            {
                "type": "string",
                "api_name": "linkedin_id",
                "hidden": true,
                "options": [],
                "summary": "",
                "local_metric": false,
                "display_name": "",
                "company_profile_name": "",
                "preview_description": "",
                "geocode": false
            },
            {
                "type": "string",
                "api_name": "company_website",
                "hidden": false,
                "options": [],
                "summary": "",
                "local_metric": false,
                "display_name": "",
                "company_profile_name": "",
                "preview_description": "",
                "geocode": false
            },
    				...
            {
                "type": "number",
                "api_name": "total_rows",
                "hidden": true,
                "options": [],
                "summary": "",
                "local_metric": false,
                "display_name": "",
                "company_profile_name": "",
                "preview_description": "",
                "geocode": false
            }
        ],
        "rows": [
            [
                "2135371",
                "https://stripe.com",
                null,
                "Stripe",
                "stripe",
                "PRIVATE",
                "stripe.com",
                "USA",
                9440247725,
                null,
                50000000000,
                10000000000,
                "2023-03-15",
                "https://crunchbase.com/organization/stripe",
                "Sales Development Representative",
                "Sales",
                "https://www.linkedin.com/jobs/view/3877324263",
                "www.linkedin.com",
                1,
                "Who we are\n\nAbout Stripe\n\nStripe is a financial infrastructure platform for businesses. Millions of companies—from the world’s largest enterprises to the most ambitious startups—use Stripe to accept payments, grow their revenue, and accelerate new business opportunities. Our mission is to increase the GDP of the internet, and we have a staggering amount of work ahead. That means you have an unprecedented opportunity to put the global economy within everyone’s reach while doing the most important work of your career.\n\nAbout The Team\n\nAs a Sales Development Representative (SDR) at Stripe, you will drive Stripe’s future growth engine by working with Demand Gen and the Account Executive team to qualify leads and collaboratively build Stripe’s sales pipeline. You get excited about engaging with prospects to better qualify needs. You are adept at identifying high value opportunities and capable of managing early sales funnel activities.You are used to delivering value in complex situations and are energized by learning about new and existing products. Finally, you enjoy building – you like to actively participate in the development of the demand generation and sales process, the articulation of Stripe’s value proposition, and the creation of key tools and assets. If you’re hungry, smart, persistent, and a great teammate, we want to hear from you!\n\nFor the first months, you’ll be part of the SD Associate program which is designed to accelerate your onboarding and ramp to full productivity as an SDR. This intensive program is built to help you quickly build and develop skills required to be successful in this role. Upon completion, you’ll continue learning and growing in your career as part of Stripe’s Sales Development Academy. These programs are endorsed and supported by sales leaders as an important part of investing in our people.\n\nWe take a data driven, analytical approach to sales development, and are looking for someone who is confident in both prospecting to customers and in helping design our strategy. If you’re hungry, smart, persistent, and a great teammate, we want to hear from you!\n\nWhat you’ll do\n\nResponsibilities\n\nResearch and create outreach materials for high value prospects, in partnership with SDRs and AEsFollow up with Marketing generated leads to qualify as sales opportunities. Move solid leads through the funnel connecting them to a salesperson, and arranging meetingsExecute outbound sales plays created by marketingInitiate contact with potential customers through cold-calling or responding to inquiries generated from MarketingDevelop relationships with prospects to uncover needs through effective questioning to qualify interest and viability to prepare hand-off to salesFollow-up with potential customers who expressed interest but did not initially result in a sales opportunityEffectively work through lead list meeting/exceeding SLAs, consistently update activity and contact information within the CRM system and support weekly reporting effortsCollaborate and provide feedback and insights to Marketing to help improve targeting and messaging\n\n\nWho you are\n\nWe’re looking for someone who meets the minimum requirements to be considered for the role. If you meet these requirements, you are encouraged to apply.\n\nMinimum Requirements\n\nA track record of top performance or prior successSuperior verbal and written communication skillsSelf starter who is able to operate in a hyper growth environmentThis role requires in-office participation three (3) days per week in our Chicago office \n\n\nPreferred Qualifications\n\nProfessional experience\n\n\nHybrid work at Stripe\n\nOffice-assigned Stripes spend at least 50% of the time in a given month in their local office or with users. This hits a balance between bringing people together for in-person collaboration and learning from each other, while supporting flexibility about how to do this in a way that makes sense for individuals and their teams.\n\nPay and benefits\n\nThe annual US base salary range for this role is $65,600 - $98,300. For sales roles, the range provided is the role’s On Target Earnings (\"OTE\") range, meaning that the range includes both the sales commissions/sales bonuses target and annual base salary for the role. This salary range may be inclusive of several career levels at Stripe and will be narrowed during the interview process based on a number of factors, including the candidate’s experience, qualifications, and location. Applicants interested in this role and who are not located in the US may request the annual salary range for their location during the interview process.\n\nAdditional benefits for this role may include: equity, company bonus or sales commissions/bonuses; 401(k) plan; medical, dental, and vision benefits; and wellness stipends.",
                "2024-03-29T22:35:22Z",
                "2024-12-05T00:00:00Z",
                "chicago",
                "Chicago, Illinois, United States",
                "On-site",
                "True",
                13385453,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "United States of America (the)",
                "USA",
                "840",
                631394,
                3
            ]
        ]
    }
    ```
    

And total count of results matching the search query would be:  `response[rows][0][-1]`  (`-1` refers to last item of the row), which would be 3 in the case above
- **Response**
    
    https://jsonhero.io/j/3ZQ16TON5oUV
    
    [JSON Hero](https://jsonhero.io/j/gTebm3gqR4em/tree)
    
    **Parsing the response**
    
    The response format is same as that of Company Discovery: Screening API.
    
    You refer here on how to parse the response [**Parsing the response**](https://www.notion.so/Parsing-the-response-28de6e16940c4615b5872020a345766a?pvs=21)
### 2. Funding Milestones

Use this request to get a time-series of funding milestones with  `company_id` equal to any one of [637158, 674265, 674657]
Curl
curl --request POST \
  --url https://api.crustdata.com/data_lab/funding_milestone_timeseries/ \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $auth_token' \
  --header 'Content-Type: application/json' \
  --header 'Origin: https://crustdata.com' \
  --header 'Referer: https://crustdata.com/' \
  --data '{"filters":{"op": "or", "conditions": [{"column": "company_id", "t
Python
import requests
import json

url = "https://api.crustdata.com/data_lab/funding_milestone_timeseries/"

headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Authorization': f'Token {auth_token}',  # Ensure the auth_token variable is defined
    'Content-Type': 'application/json',
    'Origin': 'https://crustdata.com',
    'Referer': 'https://crustdata.com/',
}

data = {
    "filters": {
        "op": "or",
        "conditions": [
            {
                "column": "company_id",
                "type": "in",
                "value": [637158, 674265, 674657]
            }
        ]
    },
    "offset": 0,
    "count": 1000,
    "sorts": []
}

response = requests.post(url, headers=headers, data=json.dumps(data))

# Print the response content
print(response.text)
- **Response**
    
    https://jsonhero.io/j/XDfprlYDbOvf 
    

### 3. Decision Makers/People Info
- All decision makers: for a given `company_id=632328`
    
    Decision makers include the people with following titles
    
    - Included decision maker titles
        
        ### Founders
        
        - CEO
        - Founder
        - Co-founder
        - Co founder
        - Cofounder
        - Co-fondateur
        - Fondateur
        - Cofondateur
        - Cofondatrice
        - Co-fondatrice
        - Fondatrice
        
        ### Executive Officers
        
        - Chief Executive Officer
        - Chief Technical Officer
        - Chief Technology Officer
        - Chief Financial Officer
        - Chief Marketing Officer
        - Chief Sales Officer
        - Chief Marketing and Digital Officer
        - Chief Market Officer
        
        ### Technical Leadership
        
        - CTO
        - VP Engineering
        - VP of Engineering
        - Vice President Engineering
        - Vice President of Engineering
        - Head Engineering
        - Head of Engineering
        
        ### Marketing Leadership
        
        - CMO
        - Chief Marketing Officer
        - Chief Marketing and Digital Officer
        - Chief Market Officer
        - VP Marketing
        - VP of Marketing
        - Vice President Marketing
        - Vice President of Marketing
        
        ### Sales Leadership
        
        - Chief Sales Officer
        - VP Sales
        - VP of Sales
        - Vice President Sales
        - Vice President of Sales
        - Vice President (Sales & Pre-Sales)
        - Head Sales
        - Head of Sales
        ### Product Leadership

      - VP Product
      - VP of Product
      - Vice President Product
      - Vice President of Product
      - Head of Product
      - Head Product                      
      ### Software Leadership

    - VP Software
    - VP of Software
    - Vice President Software
    - Vice President of Software

    ### Financial Leadership

    - CFO
    - Chief Financial Officer
    Curl
curl --request POST \
      --url https://api.crustdata.com/data_lab/decision_makers/ \
      --header 'Accept: application/json, text/plain, */*' \
      --header 'Accept-Language: en-US,en;q=0.9' \
      --header 'Authorization: Token $auth_token' \
      --header 'Content-Type: application/json' \
      --header 'Origin: http://localhost:3000' \
      --header 'Referer: http://localhost:3000/' \
      --data '{"filters":{"op": "and", "conditions": [{"column": "company_id", "type": "
Python
import requests
import json

url = "https://api.crustdata.com/data_lab/decision_makers/"
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Authorization': 'Token $auth_token',  # Replace with your actual token
    'Content-Type': 'application/json',
    'Origin': 'http://localhost:3000',
    'Referer': 'http://localhost:3000/'
}

data = {
    "filters": {
        "op": "or",
        "conditions": [
            {"column": "company_id", "type": "in", "value": [632328]}
        ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
}

response = requests.post(url, headers=headers, data=json.dumps(data))
print(response.text)
Decision makers with specific titles: for a given company_id=632328
For example, get all decision makers “vice president” and “chief” in their title
Curl
curl --request POST \
  --url https://api.crustdata.com/data_lab/decision_makers/ \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $auth_token' \
  --data '{
    "filters": {
      "op": "or",
      "conditions": [
        {
          "column": "company_id",
          "type": "in",
          "value": [632328]
        },
        {
          "column": "title",
          "type": "in",
          "value": ["vice president", "chief"]
        }
      ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
  }'

​
Python
import requests

url = "https://api.crustdata.com/data_lab/decision_makers/"

headers = {
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Authorization": "Token YOUR_AUTH_TOKEN"
}

payload = {
    "filters": {
        "op": "or",
        "conditions": [
            {
                "column": "company_id",
                "type": "in",
                "value": [632328]
            },
            {
                "column": "title",
                "type": "in",
                "value": ["vice president", "chief"]
            }
        ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
}

response = requests.post(url, headers=headers, json=payload)

# Print the response status and data
print(f"Status Code: {response.status_code}")
print(f"Response: {response.json()}")

- People profiles by their LinkedIn’s “flagship_url”
    
    For example, decision makers with LinkedIn profile url as "https://www.linkedin.com/in/alikashani"
    Curl
curl --request POST \
      --url https://api.crustdata.com/data_lab/decision_makers/ \
      --header 'Accept: application/json, text/plain, */*' \
      --header 'Accept-Language: en-US,en;q=0.9' \
      --header 'Authorization: Token $auth_token' \
      --header 'Content-Type: application/json' \
      --data '{"filters":{"op": "and", "conditions": [{"column": "linkedin_flagship_pr
      Python
import requests
import json

url = "https://api.crustdata.com/data_lab/decision_makers/"
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Authorization': 'Token $auth_token',  # Replace with your actual token
    'Content-Type': 'application/json',
    'Origin': 'http://localhost:3000',
    'Referer': 'http://localhost:3000/'
}

data = {
    "filters": {
        "op": "or",
        "conditions": [
            {"column": "linkedin_flagship_profile_url", "type": "in", "value": ["https://www.linkedin.com/in/alikashani"]}
        ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
}

response = requests.post(url, headers=headers, data=json.dumps(data))
print(response.text)
- People profiles by their “linkedin_urn”
    
    For example, decision makers with `linkedin_urn` as "ACwAAAVhcDEBbTdJtuc-KHsdYfPU1JAdBmHkh8I" . `linkedin_urn` is a 30-40 character alphanumeric sequence that includes both uppercase letters and numbers
    Curl
curl --request POST \
      --url https://api.crustdata.com/data_lab/decision_makers/ \
      --header 'Accept: application/json, text/plain, */*' \
      --header 'Accept-Language: en-US,en;q=0.9' \
      --header 'Authorization: Token $auth_token' \
      --header 'Content-Type: application/json' \
      --header 'Origin: http://localhost:3000' \
      --header 'Referer: http://localhost:3000/' \
      --data '{"filters":{"op": "or", "conditions": [{"column": "linkedin_profile_urn", "type": "in", "value
      Python
import requests
import json

url = "https://api.crustdata.com/data_lab/decision_makers/"
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Authorization': 'Token $auth_token',  # Replace with your actual token
    'Content-Type': 'application/json',
    'Origin': 'http://localhost:3000',
    'Referer': 'http://localhost:3000/'
}

data = {
    "filters": {
        "op": "or",
        "conditions": [
            {"column": "linkedin_profile_urn", "type": "in", "value": ["ACwAAAVhcDEBbTdJtuc-KHsdYfPU1JAdBmHkh8I"]}
        ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
}

response = requests.post(url, headers=headers, data=json.dumps(data))
print(response.text)
- **Response**
    
    https://jsonhero.io/j/QSAlhbuflhie
### 4. LinkedIn Employee Headcount and LinkedIn Follower Count

Use this request to get weekly and monthly timeseries of employee headcount as a JSON blob.

You either provide with list a list of Crustdata `company_id`  or `linkedin_id` or `company_website_domain`

In the following example, we request the employee headcount timeseries of companies with  `company_id` equal to any one of [680992, 673947, 631280, 636304, 631811]
CUrl
curl 'https://api.crustdata.com/data_lab/headcount_timeseries/' \
  -H 'Accept: application/json, text/plain, */*' \
  -H 'Accept-Language: en-US,en;q=0.9' \
  -H 'Authorization: Token $auth_token' \
  -H 'Content-Type: application/json' \
  -H 'Origin: https://crustdata.com' \
  -H 'Referer: https://crustdata.com' \
  --data-raw '{
    "filters": {
        "op": "or",
        "conditions": [
                    {
                        "column": "company_id",
                        "type": "=",
                        "value": 634995
                    },
                    {
                        "column": "company_id",
                        "type": "=",
                        "value": 680992
                    },
                    {
                        "column": "company_id",
                        "type": "=",
                        "value": 673947
                    },
                    {
                        "column": "company_id",
                        "type": "=",
                        "value": 631811
                    }
        ]
    },
    "offset": 0,
    "count": 100,
    "sorts": []
}' \
  --compressed
  Python
  import requests

headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-US,en;q=0.9',
    'Authorization': 'Token $auth_token',
    'Content-Type': 'application/json',
    'Origin': 'https://crustdata.com',
    'Referer': 'https://crustdata.com',
}

json_data = {
    'filters': {
        'op': 'and',
        'conditions': [
            {
                'op': 'or',
                'conditions': [
                    {
                        'column': 'company_id',
                        'type': '=',
                        'value': 634995,
                    },
                    {
                        'column': 'company_id',
                        'type': '=',
                        'value': 680992,
                    },
                    {
                        'column': 'company_id',
                        'type': '=',
                        'value': 673947,
                    },
                    {
                        'column': 'company_id',
                        'type': '=',
                        'value': 631811,
                    },
                ],
            },
        ],
    },
    'offset': 0,
    'count': 100,
    'sorts': [],
}

response = requests.post('https://api.crustdata.com/data_lab/headcount_timeseries/', headers=headers, json=json_data)
Response
  - https://jsonhero.io/j/bd2OKMSu8ZQ0/editor
### 5. Employee Headcount By Function

Use this request to get the headcount by function for the given company.

You either provide with a list of Crustdata’s `company_id`  or `company_website_domain` in the filters

CUrl
curl --request POST \
  --url https://api.crustdata.com/data_lab/linkedin_headcount_by_facet/Table/ \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $token' \
  --header 'Content-Type: application/json' \
  --header 'Origin: https://crustdata.com' \
  --data '{
    "tickers": [],
    "dataset": {
      "name": "linkedin_headcount_by_facet",
      "id": "linkedinheadcountbyfacet"
    },
    "filters": {
      "op": "and",
      "conditions": [
            {"column": "company_id", "type": "in", "value": [680992, 673947, 631280], "allow_null": false}
      ]
    },
    "groups": [],
    "aggregations": [],
    "functions": [],
    "offset": 0,
    "count": 100,
    "sorts": []
  }'

  Result
  https://jsonhero.io/j/SC3GAjKPzkDw/editor
### 6. Glassdoor Profile Metrics

Use this request to get the rating of a company on Glassdoor, number of reviews, business outlook, CEO approval rating etc.  

You either provide with a list of Crustdata’s `company_id`  or `company_website_domain` in the filters
CUrl
curl --request POST \
  --url https://api.crustdata.com/data_lab/glassdoor_profile_metric/Table/ \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $token' \
  --header 'Content-Type: application/json' \
  --header 'Origin: https://crustdata.com' \
  --data '{
    "tickers": [],
    "dataset": {
      "name": "glassdoor_profile_metric",
      "id": "glassdoorprofilemetric"
    },
    "filters": {
      "op": "and",
      "conditions": [
        {"column": "company_id", "type": "in", "value": [680992,673947,631280,636304,631811], "allow_null": false}
      ]
    },
    "groups": [],
    "aggregations": [],
    "functions": [],
    "offset": 0,
    "count": 100,
    "sorts": []
  }'
Result
https://jsonhero.io/j/SdGsOnEIJ33x/editor

### 7. G2 Profile Metrics

Use this request to get the rating of a company’s product on G2 and number of reviews etc.  

- **CUrl**
    
    ```bash
    curl --request POST \
      --url http://api.crustdata.com/data_lab/g2_profile_metrics/Table/ \
      --header 'Accept: application/json, text/plain, */*' \
      --header 'Accept-Language: en-US,en;q=0.9' \
      --header 'Authorization: Token $token' \
      --header 'Content-Type: application/json' \
      --header 'Origin: https://crustdata.com' \
      --data '{
        "tickers": [],
        "dataset": {
          "name": "g2_profile_metrics",
          "id": "g2profilemetric"
        },
        "filters": {
          "op": "or",
          "conditions": [
            {"column": "company_website_domain", "type": "=", "value": "microstrategy.com", "allow_null": false},
    			  {"column": "company_website_domain", "type": "=", "value": "lacework.com", "allow_null": false},
    				{"column": "company_website_domain", "type": "=", "value": "jumpcloud.com", "allow_null": false}
          ]
        },
        "groups": [],
        "aggregations": [],
        "functions": [],
        "offset": 0,
        "count": 100,
        "sorts": []
      }'
    
    ```Result
    https://jsonhero.io/j/SdGsOnEIJ33x/editor

  ### 8. Web Traffic

Use this request to get historical web-traffic of a company by domain

- **cURL**
    
    ```bash
    curl --request POST \
      --url 'https://api.crustdata.com/data_lab/webtraffic/' \
      --header 'Accept: */*' \
      --header 'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' \
      --header 'Authorization: Token $token' \
      --header 'Content-Type: application/json' \
      --data '{
        "filters": {
          "op": "or",
          "conditions": [
            {
              "column": "company_website",
              "type": "(.)",
              "value": "wefitanyfurniture.com"
            }
          ]
        },
        "offset": 0,
        "count": 100,
        "sorts": []
      }'
    ```
    
- **Result**
    
    ```bash
     {
    	"fields": [
    		{
    			"type": "foreign_key",
    			"api_name": "company_id",
    			"hidden": false,
    			"options": [],
    			"summary": "",
    			"local_metric": false,
    			"display_name": "",
    			"company_profile_name": "",
    			"preview_description": "",
    			"geocode": false
    		},
    		{
    			"type": "string",
    			"api_name": "company_website",
    			"hidden": false,
    			"options": [],
    			"summary": "",
    			"local_metric": false,
    			"display_name": "",
    			"company_profile_name": "",
    			"preview_description": "",
    			"geocode": false
    		},
    		{
    			"type": "string",
    			"api_name": "company_name",
    			"hidden": false,
    			"options": [],
    			"summary": "",
    			"local_metric": false,
    			"display_name": "",
    			"company_profile_name": "",
    			"preview_description": "",
    			"geocode": false
    		},
    		{
    			"type": "array",
    			"api_name": "similarweb_traffic_timeseries",
    			"hidden": false,
    			"options": [],
    			"summary": "",
    			"local_metric": false,
    			"display_name": "",
    			"company_profile_name": "",
    			"preview_description": "",
    			"geocode": false
    		}
    	],
    	"rows": [
    		[
    			1411045,
    			"wefitanyfurniture.com",
    			"WeFitAnyFurniture",
    			[
    				{
    					"date": "2024-07-01T00:00:00+00:00",
    					"monthly_visitors": 355,
    					"traffic_source_social_pct": null,
    					"traffic_source_search_pct": null,
    					"traffic_source_direct_pct": null,
    					"traffic_source_paid_referral_pct": null,
    					"traffic_source_referral_pct": null
    				},
    				{
    					"date": "2024-08-01T00:00:00+00:00",
    					"monthly_visitors": 1255,
    					"traffic_source_social_pct": null,
    					"traffic_source_search_pct": null,
    					"traffic_source_direct_pct": null,
    					"traffic_source_paid_referral_pct": null,
    					"traffic_source_referral_pct": null
    				},
    				{
    					"date": "2024-09-01T00:00:00+00:00",
    					"monthly_visitors": 3728,
    					"traffic_source_social_pct": 4.1587388254523585,
    					"traffic_source_search_pct": 48.335395016304005,
    					"traffic_source_direct_pct": 32.901089596227564,
    					"traffic_source_paid_referral_pct": 0.9439998798176015,
    					"traffic_source_referral_pct": 12.431220453595381
    				}
    			]
    		]
    	]
    }
    ```
    **Key Points:**

- When querying a website, compute the domain (`$domain` ) and then pass it in the `conditions` object of the payload like
    
    ```bash
            [{
              "column": "company_website",
              "type": "(.)",
              "value": "$domain"
            }]
    ```
    
- If there is no data for the website, it will be auto-enriched in next 24 hours. Just query again.
- For parsing the response, please follow:
    - [https://www.notion.so/crustdata/Crustdata-Discovery-And-Enrichment-API-c66d5236e8ea40df8af114f6d447ab48?pvs=4#28de6e16940c4615b5872020a345766a](https://www.notion.so/Crustdata-Discovery-And-Enrichment-API-c66d5236e8ea40df8af114f6d447ab48?pvs=21)
### 9. Investor Portfolio

Retrieve portfolio details for a specified investor. Each investor, as returned in the [company enrichment endpoint](https://www.notion.so/Crustdata-Discovery-And-Enrichment-API-c66d5236e8ea40df8af114f6d447ab48?pvs=21), has a unique identifier (UUID), name, and type. This API allows you to fetch the full portfolio of companies associated with an investor, using either the investor's `uuid` or `name` as an identifier.
Example 1: query by investor uuid 
Note: uuid for an investor can be retrieved from /screener/company response. It is available in funding_and_investment.crunchbase_investors_info_list[*].uuid field 
curl 'https://api.crustdata.com/data_lab/investor_portfolio?investor_uuid=ce91bad7-b6d8-e56e-0f45-4763c6c5ca29' \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $auth_token'
​
Example 2: query by investor name 
Note: uuid for an investor can be retrieved from /screener/company response. It is available in funding_and_investment.crunchbase_investors_info_list[*].uuid field 
curl 'https://api.crustdata.com/data_lab/investor_portfolio?investor_name=Sequoia Capital' \
  --header 'Accept: application/json, text/plain, */*' \
  --header 'Accept-Language: en-US,en;q=0.9' \
  --header 'Authorization: Token $auth_token'
  - **Result**
    
    Full sample: https://jsonhero.io/j/hSEHVFgv68pz        